###

services:
  nginx:
    # profiles:
    #   - nginx
    networks:
      - openland
    labels:
      - traefik.enable=true
      - traefik.docker.network=openland
      - traefik.http.routers.nginx-router.rule=Host(`danswer.localhost`)
      - traefik.http.routers.nginx-router.priority=1
      - traefik.http.routers.nginx-router.entrypoints=web
      - traefik.http.services.nginx.loadbalancer.server.port=80
      - custom.traefik.group=openaide

  api_server:
    networks:
      - openland
    # labels:
    #   - traefik.enable=true
    #   - traefik.docker.network=openland
    #   - traefik.http.routers.api_server-router.rule=Host(`danswer.localhost`) && (PathPrefix(`/api`) || Path(`/openapi.json`))
    #   - traefik.http.routers.api_server-router.priority=0
    #   - traefik.http.routers.api_server-router.entrypoints=web
    #   - traefik.http.services.api_server.loadbalancer.server.port=8080
    #   - custom.traefik.group=openaide

  background:
    networks:
      - openland

  web_server:
    networks:
      - openland
    # labels:
    #   - traefik.enable=true
    #   - traefik.docker.network=openland
    #   - traefik.http.routers.web_server-router.rule=Host(`danswer.localhost`) && PathPrefix(`/`)
    #   - traefik.http.routers.web_server-router.priority=1
    #   - traefik.http.routers.web_server-router.entrypoints=web
    #   - traefik.http.services.web_server.loadbalancer.server.port=3000
    #   - custom.traefik.group=openaide

  inference_model_server:
    networks:
      - openland

  indexing_model_server:
    networks:
      - openland

  relational_db:
    networks:
      - openland

  index:
    networks:
      - openland

  cache:
    networks:
      - openland

##
networks:
  openland:
    external: true
